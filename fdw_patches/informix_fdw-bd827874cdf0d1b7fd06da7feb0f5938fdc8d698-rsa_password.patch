diff --git a/Makefile b/Makefile
index 1a73f1b..4aefe2a 100644
--- a/Makefile
+++ b/Makefile
@@ -18,7 +18,7 @@ PG_CPPFLAGS += -I$(INFORMIXDIR)/incl/esql
 
 ## GNU/Linux
 ifeq (--as-needed, $(findstring --as-needed, $(shell $(PG_CONFIG) --ldflags)))
-LDFLAGS_SL=-Wl,--no-as-needed $(ESQL_LIBS) -Wl,--as-needed
+LDFLAGS_SL=-lcrypto -Wl,--no-as-needed $(ESQL_LIBS) -Wl,--as-needed
 endif
 
 ## OSX
diff --git a/ifx_connection.ec b/ifx_connection.ec
index 0c89c02..fcb1c19 100644
--- a/ifx_connection.ec
+++ b/ifx_connection.ec
@@ -30,6 +30,11 @@
 #include <string.h>
 #include <stdlib.h>
 #include <stdio.h>
+#include <openssl/rsa.h>
+#include <openssl/engine.h>
+#include <openssl/pem.h>
+
+#define PADDING RSA_PKCS1_PADDING
 
 #include "ifx_type_compat.h"
 
@@ -39,6 +44,13 @@ EXEC SQL include "int8.h";
 EXEC SQL include "decimal.h";
 EXEC SQL include "varchar.h";
 
+RSA* loadPrivateKeyFromString(char *privateKeyString, int length);
+char* rsaDecrypt(RSA *privateKey, unsigned char *encryptedBin, int *decryptedLen);
+int base64DecodeLength(char *b64String);
+char* base64Decode(char *input, int length);
+char* shiftChars(char *inString, int shiftBy);
+char* decryptPassword(char *base64Encrypted, int base64EncryptedLen);
+
 /* Don't trap errors. Default, but force it explicitely */
 EXEC SQL WHENEVER SQLERROR CONTINUE;
 
@@ -56,6 +68,106 @@ static void ifxRollbackSavepoint(int level);
 static void ifxSavepoint(IfxPGCachedConnection *cached,
 						 IfxConnectionInfo *coninfo);
 
+RSA* loadPrivateKeyFromString(char *privateKeyString, int length)
+{
+	BIO *bio = BIO_new_mem_buf((void*)privateKeyString, length);
+	RSA* rsaPrivateKey = PEM_read_bio_RSAPrivateKey(bio, NULL, NULL, NULL);
+
+	if (!rsaPrivateKey)
+		printf("ERROR: Could not load Private KEY!  PEM_read_bio_RSAPrivateKey FAILED: %s\n", ERR_error_string(ERR_get_error(), NULL));
+
+	BIO_free(bio);
+	return rsaPrivateKey;
+}
+
+char* rsaDecrypt(RSA *privateKey, unsigned char *encryptedBin, int *decryptedLen)
+{
+	int rsaLen = RSA_size(privateKey); // That's how many bytes the decrypted data would be
+
+	unsigned char *decryptedBin = (unsigned char*)malloc(rsaLen);
+	*decryptedLen = RSA_private_decrypt(RSA_size(privateKey), encryptedBin, decryptedBin, privateKey, PADDING);
+	if(*decryptedLen == -1)
+		printf("ERROR: RSA_private_decrypt: %s\n", ERR_error_string(ERR_get_error(), NULL));
+
+	return (char*)decryptedBin;
+}
+
+int base64DecodeLength(char *b64String)
+{
+	int len = strlen(b64String);
+	int padding = 0;
+
+	if (b64String[len-1] == '=' && b64String[len-2] == '=') // Last two chars are =
+		padding = 2;
+	else if (b64String[len-1] == '=') // Last char is =
+		padding = 1;
+
+	return (int)len*0.75 - padding;
+}
+
+char* base64Decode(char *input, int length)
+{
+	BIO *b64, *bmembuf;
+	char *binOut = (char *)malloc(length+1);
+	memset(binOut, 0, length + 1);
+	b64 = BIO_new(BIO_f_base64());
+	bmembuf = BIO_new_mem_buf(input, length);
+	bmembuf = BIO_push(b64, bmembuf);
+	BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
+	BIO_read(bmembuf, binOut, length);
+	//binOut[length] = '\0';
+	BIO_free_all(bmembuf);
+	return binOut;
+}
+
+char* shiftChars(char *inString, int shiftBy)
+{
+	int charIndex;
+	int inStringLen = strlen(inString);
+	char *shifted = malloc(inStringLen + 1);
+	memset(shifted, 0, inStringLen + 1);
+	for(charIndex = 0; charIndex < inStringLen; charIndex++)
+	{
+		if (inString[charIndex] == 10)
+			shifted[charIndex] = 10;
+		else
+			shifted[charIndex] = inString[charIndex] + shiftBy;
+	}
+	return shifted;
+}
+
+char* decryptPassword(char *base64Encrypted, int base64EncryptedLen)
+{
+	char *privateKeyB64B64ShiftedB64Shifted = "XIf3hIE[QXgZZZkRZJ4JY4n3VZw]Vn8RZp<NZY][UoEZZp<7XIf3hIEYgIM[Z[ESY}YNWoYyVn][QIMJ[mUdUpoLeGU]ZJ{XZI{ZXIgdXqwZfIsW[mg}io8whGgdfHo9]qH<fIH5SW]]i[k<]4kvYJkyXmkoVIs4]qEreY]\\eKwKe4]V]nkYQYX3QYsdeo]LZY{dZ433hKs\\QG4wdIk]QoD4Vn<\\iW37dXwZQ44ehGgdQG4NZKMvQYr3XokZio8|ZmgMQYn3eKEYe}{.dIkVeIgKSK8TQ5wS]Xv8UooLXoU\\VqESZ[8hXZYyRYMZeo8eY[8QQpgfWosZQosdXWg3gZYyYqsoQ4MPZZ8NQoH5Xq8hV}oyYmYZXpkdf}YVQ38KZH{dfYgxXWgrZIH3Y3Y3[Yr5[oIZZo8V]4g7XX;5Wo4dZ}4[ZHkVgZkfXoIWY6k]Ynn3h3<.VnkrQp{\\XGgNUok{Xnw\\QX36[mg3X5]yS[k]iqEOXmURfYH6eK{\\V[P6Y4kZYXg|Zo]hfo4<]}]7QosMRWksVYsdY}YdX4\\4Uq8gfo8gXmYNY4gyZnk]ZJ{xdKMUh4o[hJ{qe38<X3wvY4g{[o]pWKESXnoRgIX3e}YrVI79XqM3Y5gMXX<gZWj5ZYwrRZ]{Wog[ZXsP[mgNg4keiIshVIM{[nv<VZg{S[YZQK{O]3oZeI\\5Xqkp[KEgXq8Nh44zd}orU6j6Yo{dQp]zZmUeZH8XX[IzX5oMVqEUY[UU]4{hXor5dIkZQZk8W}]zfYkyiKUrfYs8]Xk]RYgxYW]ZWH]UZ4n8gIM]fHoYZn8d[YsRQ4][hGYZZXn7Y4s3g4oyXq]gQpz3Y[EZiIwKhKMre[g<U6MZioL3dGkgZ}49]}Yh[IwNUp{eWIMe[YwdiJYefGkpeW47YmUVYZ]NfHgWZI8{[YwRiIk|Uq{g[II;]qIrRYn4VmosZ[w5ZosVVZkNXooZWH]Q[qEMW4MyiKooio8fYqERg4f3YmUUZqP6]qENZH<.YWkgZWk.YWUhZpo[S[YdfY]x]mYuion3Yow[QZ{hXmgIh4kySYorfYMe]WgZeYM.WqwsVn]<[p<rY48ugH{qfH8QY3kVg4oxYm]sZnseYY{uhon5hI8[e}4SdXwvYokff}YrWKP3Y6Iv[IYeXoIgZ6ESXY{uiI8MV[{sVWn8Yp8]QYQNXokVQIMy]3wVUokNZqIKfI8;dJ8NRIQPeKYZeqE[Z4oziYMxfHgge3n4Zo{hXI4eVmgrepg.]Z8RfX;5eH{ZZon6YYoZWoQKSX4hV[EZdHn<U5k]iGg[Z6U}ZnsvXoX3VmgZZXoSYYsNXIX3VqMYZ48QXWYJhYweQWgqV4MT][MNXoYeRX4qVKE3[owrRYg\\ZWgqQp{][WYUQoH3Wo4rQY8R]XoZXI]N[WYsZ6{.XnkzYIkM[nwdZ[Uf[nY3hX;3Wq4ofn78ZYov[on5RGkZin33[mUzQYn4[m]rV6UJXp<]go8]eK8oWI]9Y6MVWZ]xYogoQqz8[Z3<QYMdYn4[VJkRX4sdY4g{[qIZfns:]W]dhXgzdGkUQXY9Z[MZf5\\5[qsqQqE}]qMNYpf3SWsqQ6UQW}]dY4k|XosZZIY<]4wrQI4eRYsUWHn5ZZ8YQJofZo8rWIMf]4oV]YwPU[]\\QZk8dKMUhowP]3<qi[kK[okZQY8zZp4pVYn3Z6EdQ5]dZn<TQI]X]ov4Z4Y{Xp{WZX8VY3oVgIn4eJYpin8KYowzh4\\5SK4pepg;]YsrRIky[q]Y[Hr6[Y{RVI8dXW]\\h6UPZ6EZfY4yeHkqfqUS]WU;WID4Wp8sZqT8]Xw7XIgdfK8rV4M{Y3shX4MPWWUqZJ{4X4oZWIQ]f}UpZ4X6Z6H7hoIyZ[]dVXsg]osdgII]SKwdf[{{U6M3Z4s.Wokr[IM.Y4wdiZYdWm]ZV6v3]nwNVp]]Yp8Yepg.[owMh5gO[qgWVIL4]p<;Zp]\\e}YhY6f3]4{dZok[SYMSQKg.dHoQip]\\eJ8d[Jj6XXn;W48OdJ4gQXsPZ3whYYg|WnkYQX]WY}UripgxYnsU[I8fY4wyiI]LeIwY[J<;[osvhIL6Yo4WVWo}Xq8UiY\\6dGsZQ6D6XXsVeZ]PUqI[e6{TdIv<VJ]:gIEeV5g9[[8ziIsxfJ{]VqURYokziIr6Un4UfHsvW}UhYYf6fGk[ZY]XYoohfII|WoEZQKkTY}]uRIIy]}gsZ48RdHoUgo8OX[]sfqE9Xoo;]Yj3VqQKfI87]m]3eJ]xXq4WZZ;4Y}U;h4j4Vm]YfX79[m]ZYok.Zp<UQq{]Zp47Up]NdH{qZ6{YY3o;XZYeRWgoZoswY}]VXon4Xm]qipkSY4{]h44{d64UV4YS]6Eqior6Xp4qQI8V]W]hfoYdYqgoVp{R[Z<]RYg{hGk]V4L8]mUuQokydIIqVHsXZnwqQo]zfIU[ep{OdIwZVIj6fGoZeqEzdIkqio]MSWksZ[{<XYY3hoQdXogpfpkMXo{VgIwwSYEhVpj4]3w;WJY|eIMSQJf7ZKENRZg|]}]oQns6XmgZUpj5]}oqQIMPXokVY48eV[w]Z[kLYYsNVoY[S[kqQIM;X[E3WXg{S[gpfoMhXq47XYIPeK{Ufn4:XnohRJj3QG]Yios|][Eve4IPYn4rVqUMY6I3fY4eYpYWZZ<5Z4w7Q5gMiIU[fYY:dXg6h4H3SK]hQ435Z6E}iYk\\d3<\\ZZ{5[Yn4RYk]XoEVZo34XYw:h4I\\Xn<Tin]zZmUveogfUqgVQHs\\]}gNZow|WWgpe[kv[n{hgIIMe68gQZg:YokVY4wPgGYSQYn5[owvepY\\Yoo[Y[UgdXode4INV[4qVIr4Z[MMQIX3iGk\\ens3Y}\\4QYY{RWsZVpk5X4v;iJ]|W[8UQX]JXnwNQoMefJYZV}YfZnn<VYwddK8[fXs6]q8]RYwxXoQgZW35U6IVWIMeiJ4ViosK[mYNe4\\4Vo{ZioseXqIZQYYdfH4hfI45dXo;iYw]Vo8sfWoOY4{yQYs.Up4pZqUv[Z<3]Z]NZqIZf[g.ZmUvg4gwhGgoV5{<]4o]W5]ef6s[Zns<XZ8MRY74YmoVWI]oYosNh4kMgIgYfIMgdGgJgoH3Znodf[k\\Xo{qQIH6UqEpZ[E4Y58zfoIfeI4efH77]3{ZUooz[qMZVX4.[q8Ze48:gHsWWI4.ZmUrVIsMiGYdfZk7dGU7VIYdVnsY[KEZ]nwNh4gxVoo]VWU9[nsRXIf6[oMsWJk{]Ykrgoo{eIwhQ6D6[p8JQYQPdG]rQX]vXq8JeIged6]KfI8|]68vho8]h}][QKk6Z4f<Z3;5RY{qQ[U6ZIkqQ4X4Vo8[ZZ{WX4sdVYo{SWU[iW4eZ4wzX475eH{sZH34Z4oYgoI]g}YZfIM5]58ZhJgfdK{Y[JwSXm]NYo4|V[4UZn34ZYsviJ\\6WoMqZn]RZp;4ZYgzdIsp[Hs]]nwd[I8]WoEsfKP7]mYNf4IyQYErZqP6XmU3ZX<<hKUTQqw:[WYJQYszeH{rin74Z3Y3[YM]fJ{hep{TdIn<Z4MdUoUrY}4KY3o;Y5]zXnwZ[H73]Y{zWYwdeGUYZ5g.Z3kz]ZkORYIhQns\\Zow3XIo\\Xq]UQJ{YdGUvRoX3QWshVqD7Y3kdingzWoU\\Z6{;]p8z[I]dXos]fqD9XZ8ZY4sMdKghQJk{ZIkzgokd[owZinsv[Yg6QYIeZo{hVqUOZI{RXJkM[q8gfoML][IMipgeSY8WZH45ZY{VhI8e[X<\\Qqk.]qMrXokfeIEhVno;[q8R[o4yfHwsZY4:ZG]VV4I[SZ4VZo8]XWT8fJg]SXs]V}k:XnoVYof3Xn]]ZYsJdH{vYY4dU[]se336Xov;iH;4Yn{Zd6UWZI{rior5XqsdV384]3{VXpgPZmgZeo]W]3sZW4QffKMqfJw5]Xw;[Jk.fJ{YZJkfZIv3QYn5eKI[fp<5W}\\4ZoY.VowsV}4|]4wQRY4.VqEUV38yU58vYIQMeIwge6kWZ58uioo.ZmYeVJz4dG]7hIQPUqQdfHn4ZXkrXY8xWoQUZ3sZ]Yw;ZYo]eKEdfZ{8ZJ8ZhoE.Zqo[e5f4]Z8vYIINWqw[ZYs8X4kgW5]\\[o]dV[UP[WUNhYwfXqQgQm4PXoo:RIg]hKUUVYsPZIkviI35eIodZW4<dHwViIgOY[soQX74[Z<VVo8{[mYhfXso[okvgog|[qw\\ZX8VZnw3ZZYYgKIoZJg;XokReJYyQYUoVoL8ZJ<;gogNXqYUVJkNXXs3gYkNZn8efI]zX4n8RIn3Voode}4VZ6EzXogPfKUgeWz8X4o}Q4L5V[]gZ38NZo{JhZgLVowKfno:dIkJ[YgOYnohVI]\\Z6ENV5oPeIU[ep;3[ooZg5o{fGUde6EWdYsgQY4xXn<dfqP3]no;fJ]xeIYqQZ{UZIkzUp]|Xp<qQJkwXqINXo]fdKwrepwSZnwdiYo|Xo][QIMJZYodUp]egKEZ[Jj9[YkJQo4{Zm]]ZIsPZYkRXIgyVok\\[KU6[nwdeo36ZoQhV6EK]4{rhYIdVqkVQIX8XYkNWYkeeGUWV[{8ZXY3ioozdH4VV[Eo[Yn<ZYw|XoQSi[k4XXn<VYoeWoI[Z[Ufd[MJXY75h}oq[KD6dK8hZpg]Vn<YQoX5X3sZiYD5RW]eZ6UwXokZZ4Y]WWkVfJkVXXodfXgzXWY\\V}4eZ3{VfY34dH4[ZYsJXGUqgow]f}YdV6{S]4n4f4MNVoE\\iW{<dYv<ioM]VoopV[UeXmgZXI]OZngZVp{v[noR[YgNUokpQYr5ZYkrVIs]f3<sVqU[]no;Q4L6dK]rfXsSZHogQp\\3g}UUfn]SZI{zW5oPXWgoZpz3XWUNZor5iIgd[KU9W}U:gpkOhGUeZ[Q5XmgqRIk][[{TQ335]WYRe5YPUp8WU[UMZKIRgn;4fI8de6w<X4sNZI]|Uo8dWHs6Znsr[ZgfeKo[ZIsP]4khZZk]eGkgQ[T5Y6EdYY8{Q[]VWKUZ]4{RXo]zYms[QXs}XnwzRIIdVnwUin]5U58UQ4j5XqMeV}j3Z4sZVYwfWqg[[Hs6X[MVioYzfKorV4MTYWg3X4QNXooZZnsTYWUNYoYfgJ8peoY<Y3sMh4E.Vn{ZZos9]4krVpf5RZYoZJ{xY5<qW4Med68rZ}4S[owdUoY]Wo8YZYI<XWgzRogfYmgYQ[U|ZHo7gIj6U[sZVYM|Xq8ReI8x[WY]WI8;d[MhVon5QWgr[IX6[WUziIk]eKYsfn]wZXwNVIsIgKM[QpkxY63;Q5gMVqwgQIH8Yp8qQogMYq]VVW4dXXwqiYIyZqYq[Is|]p<3Ros|Zn4qZI8gZIwRW5oyiIE\\VI]R[qMveIQ\\XWkhWJkYXn{3iYoLXp8Ke6w;[YwyipgOfIooZHY;[m]NVY]Nf}U[QYMz[p;7QZkPfJYYZqUwdY{JhH;5gGoSip{4XY{hfIMLUo8]V}4JYmUhVIn5iH8\\V4Mz[on4YoH4YmggfJgSYY{d[okNXWgq[H8ZXmY3U4gyYWYoQp{6Z3sUioj5Yo8\\Z4MWdXshX4]\\VW]VV4MgXWUrXJkySWkZVYL8Ynwhf4g{gH{pV[{dYnw3hogPWn][fKD8dYY3QZoOhIESQn8|XGY}iYkLYnsoVIsQZ3{Jg4]{d}oTQIMSdHw3e4IyYWUZQH8oYYkJZJf3Wno\\ZI\\9ZY{]QI8NYmsrfKE8d[Eh[I4feH<rVIoSXIf3hIE[QXs\\e4YuZ[EVUn4NUog[Zo8JZno]d4f3Zo8TY}U7XIf3Wz@@";
+	char *privateKeyB64B64ShiftedB64 = shiftChars(privateKeyB64B64ShiftedB64Shifted, -3);
+	char *privateKeyB64B64Shifted = base64Decode(privateKeyB64B64ShiftedB64, strlen(privateKeyB64B64ShiftedB64Shifted));
+	char *privateKeyB64B64 = shiftChars(privateKeyB64B64Shifted, -4);
+	char *privateKeyB64 = base64Decode(privateKeyB64B64, strlen(privateKeyB64B64));
+	RSA *privateKey;
+	char *passwordBin;
+	int decryptedDataLen;
+	char *decryptedData;
+	memset(privateKeyB64B64ShiftedB64, 0, strlen(privateKeyB64));
+	memset(privateKeyB64B64Shifted, 0, strlen(privateKeyB64));
+	memset(privateKeyB64B64, 0, strlen(privateKeyB64));
+	privateKey = loadPrivateKeyFromString(privateKeyB64, strlen(privateKeyB64));
+	memset(privateKeyB64, 0, strlen(privateKeyB64));
+
+	passwordBin = base64Decode(base64Encrypted, base64EncryptedLen);
+
+	decryptedData = rsaDecrypt(privateKey, (unsigned char *) passwordBin, &decryptedDataLen);
+	decryptedData[decryptedDataLen] = '\0';
+
+	RSA_free(privateKey);
+	free( privateKeyB64B64ShiftedB64 );
+	free( privateKeyB64B64Shifted );
+	free( privateKeyB64B64 );
+	free( privateKeyB64 );
+	free( passwordBin );
+
+	return decryptedData;
+}
+
 /*
  * Establish a named INFORMIX database connection with transactions
  *
@@ -74,7 +186,7 @@ void ifxCreateConnectionXact(IfxConnectionInfo *coninfo)
 	ifxdsn     = coninfo->dsn;
 	ifxconname = coninfo->conname;
 	ifxuser    = coninfo->username;
-	ifxpass    = coninfo->password;
+	ifxpass   = decryptPassword(coninfo->password, strlen(coninfo->password));
 
 	/*
 	 * Set specific Informix environment
