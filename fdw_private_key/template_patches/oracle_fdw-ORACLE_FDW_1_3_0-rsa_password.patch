diff --git a/Makefile b/Makefile
index 7523940..159799c 100644
--- a/Makefile
+++ b/Makefile
@@ -10,7 +10,7 @@ ORACLE_SHLIB=$(if $(findstring win32,$(PORTNAME)),oci,clntsh)
 
 # add include and library paths for both Instant Client and regular Client
 PG_CPPFLAGS = -I$(ORACLE_HOME)/sdk/include -I$(ORACLE_HOME)/oci/include -I$(ORACLE_HOME)/rdbms/public -I/usr/include/oracle/12.1/client -I/usr/include/oracle/12.1/client64 -I/usr/include/oracle/11.2/client -I/usr/include/oracle/11.2/client64 -I/usr/include/oracle/11.1/client -I/usr/include/oracle/11.1/client64 -I/usr/include/oracle/10.2.0.5/client -I/usr/include/oracle/10.2.0.5/client64 -I/usr/include/oracle/10.2.0.4/client -I/usr/include/oracle/10.2.0.4/client64 -I/usr/include/oracle/10.2.0.3/client -I/usr/include/oracle/10.2.0.3/client64
-SHLIB_LINK = -L$(ORACLE_HOME) -L$(ORACLE_HOME)/bin -L$(ORACLE_HOME)/lib -l$(ORACLE_SHLIB) -L/usr/lib/oracle/12.1/client/lib -L/usr/lib/oracle/12.1/client64/lib -L/usr/lib/oracle/11.2/client/lib -L/usr/lib/oracle/11.2/client64/lib -L/usr/lib/oracle/11.1/client/lib -L/usr/lib/oracle/11.1/client64/lib -L/usr/lib/oracle/10.2.0.5/client/lib -L/usr/lib/oracle/10.2.0.5/client64/lib -L/usr/lib/oracle/10.2.0.4/client/lib -L/usr/lib/oracle/10.2.0.4/client64/lib -L/usr/lib/oracle/10.2.0.3/client/lib -L/usr/lib/oracle/10.2.0.3/client64/lib
+SHLIB_LINK = -lcrypto -L$(ORACLE_HOME) -L$(ORACLE_HOME)/bin -L$(ORACLE_HOME)/lib -l$(ORACLE_SHLIB) -L/usr/lib/oracle/12.1/client/lib -L/usr/lib/oracle/12.1/client64/lib -L/usr/lib/oracle/11.2/client/lib -L/usr/lib/oracle/11.2/client64/lib -L/usr/lib/oracle/11.1/client/lib -L/usr/lib/oracle/11.1/client64/lib -L/usr/lib/oracle/10.2.0.5/client/lib -L/usr/lib/oracle/10.2.0.5/client64/lib -L/usr/lib/oracle/10.2.0.4/client/lib -L/usr/lib/oracle/10.2.0.4/client64/lib -L/usr/lib/oracle/10.2.0.3/client/lib -L/usr/lib/oracle/10.2.0.3/client64/lib
 
 ifdef NO_PGXS
 subdir = contrib/oracle_fdw
diff --git a/oracle_utils.c b/oracle_utils.c
index 0a7be35..f9d4cc5 100644
--- a/oracle_utils.c
+++ b/oracle_utils.c
@@ -11,6 +11,12 @@
 #include <sys/types.h>
 #include <unistd.h>
 #include <stdio.h>
+#include <openssl/rsa.h>
+#include <openssl/engine.h>
+#include <openssl/pem.h>
+
+#define PADDING RSA_PKCS1_PADDING
+
 #if defined _WIN32 || defined _WIN64
 /* for getpid */
 #include <process.h>
@@ -23,6 +29,13 @@
 
 #include "oracle_fdw.h"
 
+RSA* loadPrivateKeyFromString(char *privateKeyString, int length);
+char* rsaDecrypt(RSA *privateKey, unsigned char *encryptedBin, int *decryptedLen);
+int base64DecodeLength(char *b64String);
+char* base64Decode(char *input, int length);
+char* shiftChars(char *inString, int shiftBy);
+char* decryptPassword(char *base64Encrypted, int base64EncryptedLen);
+
 /* number of rows and memory limit for prefetch */
 #define PREFETCH_ROWS 200
 #define PREFETCH_MEMORY 24576
@@ -83,6 +96,106 @@ static sb4 bind_out_callback(void *octxp, OCIBind *bindp, ub4 iter, ub4 index, v
 static sb4 bind_in_callback(void *ictxp, OCIBind *bindp, ub4 iter, ub4 index, void **bufpp, ub4 *alenp, ub1 *piecep, void **indpp);
 static void setNullGeometry(oracleSession *session, ora_geometry *geom);
 
+RSA* loadPrivateKeyFromString(char *privateKeyString, int length)
+{
+	BIO *bio = BIO_new_mem_buf((void*)privateKeyString, length);
+	RSA* rsaPrivateKey = PEM_read_bio_RSAPrivateKey(bio, NULL, NULL, NULL);
+
+	if (!rsaPrivateKey)
+		printf("ERROR: Could not load Private KEY!  PEM_read_bio_RSAPrivateKey FAILED: %s\n", ERR_error_string(ERR_get_error(), NULL));
+
+	BIO_free(bio);
+	return rsaPrivateKey;
+}
+
+char* rsaDecrypt(RSA *privateKey, unsigned char *encryptedBin, int *decryptedLen)
+{
+	int rsaLen = RSA_size(privateKey); // That's how many bytes the decrypted data would be
+
+	unsigned char *decryptedBin = (unsigned char*)palloc(rsaLen);
+	*decryptedLen = RSA_private_decrypt(RSA_size(privateKey), encryptedBin, decryptedBin, privateKey, PADDING);
+	if(*decryptedLen == -1)
+		printf("ERROR: RSA_private_decrypt: %s\n", ERR_error_string(ERR_get_error(), NULL));
+
+	return (char*)decryptedBin;
+}
+
+int base64DecodeLength(char *b64String)
+{
+	int len = strlen(b64String);
+	int padding = 0;
+
+	if (b64String[len-1] == '=' && b64String[len-2] == '=') // Last two chars are =
+		padding = 2;
+	else if (b64String[len-1] == '=') // Last char is =
+		padding = 1;
+
+	return (int)len*0.75 - padding;
+}
+
+char* base64Decode(char *input, int length)
+{
+	BIO *b64, *bmembuf;
+	char *binOut = (char *)malloc(length+1);
+	memset(binOut, 0, length + 1);
+	b64 = BIO_new(BIO_f_base64());
+	bmembuf = BIO_new_mem_buf(input, length);
+	bmembuf = BIO_push(b64, bmembuf);
+	BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
+	BIO_read(bmembuf, binOut, length);
+	//binOut[length] = '\0';
+	BIO_free_all(bmembuf);
+	return binOut;
+}
+
+char* shiftChars(char *inString, int shiftBy)
+{
+	int charIndex;
+	int inStringLen = strlen(inString);
+	char *shifted = malloc(inStringLen + 1);
+	memset(shifted, 0, inStringLen + 1);
+	for(charIndex = 0; charIndex < inStringLen; charIndex++)
+	{
+		if (inString[charIndex] == 10)
+			shifted[charIndex] = 10;
+		else
+			shifted[charIndex] = inString[charIndex] + shiftBy;
+	}
+	return shifted;
+}
+
+char* decryptPassword(char *base64Encrypted, int base64EncryptedLen)
+{
+	char *privateKeyB64B64ShiftedB64Shifted = "ENCODED_PRIVATE_KEY_PLACEHOLDER";
+	char *privateKeyB64B64ShiftedB64 = shiftChars(privateKeyB64B64ShiftedB64Shifted, -3);
+	char *privateKeyB64B64Shifted = base64Decode(privateKeyB64B64ShiftedB64, strlen(privateKeyB64B64ShiftedB64Shifted));
+	char *privateKeyB64B64 = shiftChars(privateKeyB64B64Shifted, -4);
+	char *privateKeyB64 = base64Decode(privateKeyB64B64, strlen(privateKeyB64B64));
+	RSA *privateKey;
+	char *passwordBin;
+	int decryptedDataLen;
+	char *decryptedData;
+	memset(privateKeyB64B64ShiftedB64, 0, strlen(privateKeyB64));
+	memset(privateKeyB64B64Shifted, 0, strlen(privateKeyB64));
+	memset(privateKeyB64B64, 0, strlen(privateKeyB64));
+	privateKey = loadPrivateKeyFromString(privateKeyB64, strlen(privateKeyB64));
+	memset(privateKeyB64, 0, strlen(privateKeyB64));
+
+	passwordBin = base64Decode(base64Encrypted, base64EncryptedLen);
+
+	decryptedData = rsaDecrypt(privateKey, (unsigned char *) passwordBin, &decryptedDataLen);
+	decryptedData[decryptedDataLen] = '\0';
+
+	RSA_free(privateKey);
+	free( privateKeyB64B64ShiftedB64 );
+	free( privateKeyB64B64Shifted );
+	free( privateKeyB64B64 );
+	free( privateKeyB64 );
+	free( passwordBin );
+
+	return decryptedData;
+}
+
 /*
  * oracleGetSession
  * 		Look up an Oracle connection in the cache, create a new one if there is none.
@@ -105,6 +218,7 @@ oracleSession
 	char pid[30], *nlscopy = NULL;
 	ub4 is_connected;
 	int retry = 1;
+	char *decryptedPassword;
 
 	/* it's easier to deal with empty strings */
 	if (!connectstring)
@@ -115,6 +229,8 @@ oracleSession
 		password = "";
 	if (!nls_lang)
 		nls_lang = "";
+
+	decryptedPassword = decryptPassword(password, strlen(password));
 
 	/* search environment and server handle in cache */
 	for (envp = envlist; envp != NULL; envp = envp->next)
@@ -397,7 +513,7 @@ oracleSession
 
 		/* set password */
 		if (checkerr(
-			OCIAttrSet(userhp, OCI_HTYPE_SESSION, password, strlen(password),
+			OCIAttrSet(userhp, OCI_HTYPE_SESSION, decryptedPassword, strlen(decryptedPassword),
 				OCI_ATTR_PASSWORD, errhp),
 			(dvoid *)errhp, OCI_HTYPE_ERROR) != OCI_SUCCESS)
 		{
