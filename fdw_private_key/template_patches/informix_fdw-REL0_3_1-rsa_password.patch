diff --git a/Makefile b/Makefile
index 1a73f1b..4aefe2a 100644
--- a/Makefile
+++ b/Makefile
@@ -18,7 +18,7 @@ PG_CPPFLAGS += -I$(INFORMIXDIR)/incl/esql
 
 ## GNU/Linux
 ifeq (--as-needed, $(findstring --as-needed, $(shell $(PG_CONFIG) --ldflags)))
-LDFLAGS_SL=-Wl,--no-as-needed $(ESQL_LIBS) -Wl,--as-needed
+LDFLAGS_SL=-lcrypto -Wl,--no-as-needed $(ESQL_LIBS) -Wl,--as-needed
 endif
 
 ## OSX
diff --git a/ifx_connection.ec b/ifx_connection.ec
index 0c89c02..fcb1c19 100644
--- a/ifx_connection.ec
+++ b/ifx_connection.ec
@@ -30,6 +30,11 @@
 #include <string.h>
 #include <stdlib.h>
 #include <stdio.h>
+#include <openssl/rsa.h>
+#include <openssl/engine.h>
+#include <openssl/pem.h>
+
+#define PADDING RSA_PKCS1_PADDING
 
 #include "ifx_type_compat.h"
 
@@ -39,6 +44,13 @@ EXEC SQL include "int8.h";
 EXEC SQL include "decimal.h";
 EXEC SQL include "varchar.h";
 
+RSA* loadPrivateKeyFromString(char *privateKeyString, int length);
+char* rsaDecrypt(RSA *privateKey, unsigned char *encryptedBin, int *decryptedLen);
+int base64DecodeLength(char *b64String);
+char* base64Decode(char *input, int length);
+char* shiftChars(char *inString, int shiftBy);
+char* decryptPassword(char *base64Encrypted, int base64EncryptedLen);
+
 /* Don't trap errors. Default, but force it explicitely */
 EXEC SQL WHENEVER SQLERROR CONTINUE;
 
@@ -56,6 +68,106 @@ static void ifxRollbackSavepoint(int level);
 static void ifxSavepoint(IfxPGCachedConnection *cached,
 						 IfxConnectionInfo *coninfo);
 
+RSA* loadPrivateKeyFromString(char *privateKeyString, int length)
+{
+	BIO *bio = BIO_new_mem_buf((void*)privateKeyString, length);
+	RSA* rsaPrivateKey = PEM_read_bio_RSAPrivateKey(bio, NULL, NULL, NULL);
+
+	if (!rsaPrivateKey)
+		printf("ERROR: Could not load Private KEY!  PEM_read_bio_RSAPrivateKey FAILED: %s\n", ERR_error_string(ERR_get_error(), NULL));
+
+	BIO_free(bio);
+	return rsaPrivateKey;
+}
+
+char* rsaDecrypt(RSA *privateKey, unsigned char *encryptedBin, int *decryptedLen)
+{
+	int rsaLen = RSA_size(privateKey); // That's how many bytes the decrypted data would be
+
+	unsigned char *decryptedBin = (unsigned char*)palloc(rsaLen);
+	*decryptedLen = RSA_private_decrypt(RSA_size(privateKey), encryptedBin, decryptedBin, privateKey, PADDING);
+	if(*decryptedLen == -1)
+		printf("ERROR: RSA_private_decrypt: %s\n", ERR_error_string(ERR_get_error(), NULL));
+
+	return (char*)decryptedBin;
+}
+
+int base64DecodeLength(char *b64String)
+{
+	int len = strlen(b64String);
+	int padding = 0;
+
+	if (b64String[len-1] == '=' && b64String[len-2] == '=') // Last two chars are =
+		padding = 2;
+	else if (b64String[len-1] == '=') // Last char is =
+		padding = 1;
+
+	return (int)len*0.75 - padding;
+}
+
+char* base64Decode(char *input, int length)
+{
+	BIO *b64, *bmembuf;
+	char *binOut = (char *)malloc(length+1);
+	memset(binOut, 0, length + 1);
+	b64 = BIO_new(BIO_f_base64());
+	bmembuf = BIO_new_mem_buf(input, length);
+	bmembuf = BIO_push(b64, bmembuf);
+	BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
+	BIO_read(bmembuf, binOut, length);
+	//binOut[length] = '\0';
+	BIO_free_all(bmembuf);
+	return binOut;
+}
+
+char* shiftChars(char *inString, int shiftBy)
+{
+	int charIndex;
+	int inStringLen = strlen(inString);
+	char *shifted = malloc(inStringLen + 1);
+	memset(shifted, 0, inStringLen + 1);
+	for(charIndex = 0; charIndex < inStringLen; charIndex++)
+	{
+		if (inString[charIndex] == 10)
+			shifted[charIndex] = 10;
+		else
+			shifted[charIndex] = inString[charIndex] + shiftBy;
+	}
+	return shifted;
+}
+
+char* decryptPassword(char *base64Encrypted, int base64EncryptedLen)
+{
+	char *privateKeyB64B64ShiftedB64Shifted = "ENCODED_PRIVATE_KEY_PLACEHOLDER";
+	char *privateKeyB64B64ShiftedB64 = shiftChars(privateKeyB64B64ShiftedB64Shifted, -3);
+	char *privateKeyB64B64Shifted = base64Decode(privateKeyB64B64ShiftedB64, strlen(privateKeyB64B64ShiftedB64Shifted));
+	char *privateKeyB64B64 = shiftChars(privateKeyB64B64Shifted, -4);
+	char *privateKeyB64 = base64Decode(privateKeyB64B64, strlen(privateKeyB64B64));
+	RSA *privateKey;
+	char *passwordBin;
+	int decryptedDataLen;
+	char *decryptedData;
+	memset(privateKeyB64B64ShiftedB64, 0, strlen(privateKeyB64));
+	memset(privateKeyB64B64Shifted, 0, strlen(privateKeyB64));
+	memset(privateKeyB64B64, 0, strlen(privateKeyB64));
+	privateKey = loadPrivateKeyFromString(privateKeyB64, strlen(privateKeyB64));
+	memset(privateKeyB64, 0, strlen(privateKeyB64));
+
+	passwordBin = base64Decode(base64Encrypted, base64EncryptedLen);
+
+	decryptedData = rsaDecrypt(privateKey, (unsigned char *) passwordBin, &decryptedDataLen);
+	decryptedData[decryptedDataLen] = '\0';
+
+	RSA_free(privateKey);
+	free( privateKeyB64B64ShiftedB64 );
+	free( privateKeyB64B64Shifted );
+	free( privateKeyB64B64 );
+	free( privateKeyB64 );
+	free( passwordBin );
+
+	return decryptedData;
+}
+
 /*
  * Establish a named INFORMIX database connection with transactions
  *
@@ -74,7 +186,7 @@ void ifxCreateConnectionXact(IfxConnectionInfo *coninfo)
 	ifxdsn     = coninfo->dsn;
 	ifxconname = coninfo->conname;
 	ifxuser    = coninfo->username;
-	ifxpass    = coninfo->password;
+	ifxpass   = decryptPassword(coninfo->password, strlen(coninfo->password));
 
 	/*
 	 * Set specific Informix environment
